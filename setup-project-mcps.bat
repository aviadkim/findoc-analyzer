@echo off
setlocal EnableDelayedExpansion
echo ===================================================
echo Financial SaaS MCP Setup
echo ===================================================
echo.

REM Define project MCP directory
set PROJECT_DIR=%CD%
set MCP_DIR=%PROJECT_DIR%\mcp-servers

REM Create directories if they don't exist
if not exist "%MCP_DIR%" mkdir "%MCP_DIR%" 2>nul
if not exist "%MCP_DIR%\document-processing" mkdir "%MCP_DIR%\document-processing" 2>nul
if not exist "%MCP_DIR%\financial-analysis" mkdir "%MCP_DIR%\financial-analysis" 2>nul
if not exist "%MCP_DIR%\agent-orchestration" mkdir "%MCP_DIR%\agent-orchestration" 2>nul

REM Create PDF Parser MCP
echo Creating PDF Parser MCP...
echo // PDF Parser MCP > "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo // This MCP processes PDF documents and extracts data from them >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo const fs = require('fs'); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo const path = require('path'); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo console.log('PDF Parser MCP server running on stdio'); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo // Process PDF documents >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo async function processPdf(filePath) { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo   try { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     // Simulate PDF processing >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     const fileName = path.basename(filePath); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     return { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       success: true, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       fileName, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       text: `Extracted text from ${fileName}`, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       metadata: { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         title: 'Sample PDF', >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         author: 'Sample Author', >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         creationDate: new Date().toISOString() >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       } >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     }; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo   } catch (error) { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     return { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       success: false, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       error: error.message >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     }; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo   } >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo } >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo // Handle MCP requests >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo process.stdin.on('data', async (data) => { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo   try { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     const request = JSON.parse(data.toString()); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     const { method, params } = request; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     let result; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     switch (method) { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       case 'extractText': >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         result = await processPdf(params.filePath); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         break; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       case 'getMetadata': >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         // Implementation for metadata extraction >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         result = { success: true, metadata: { /* metadata here */ } }; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         break; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       default: >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         result = { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo           success: false, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo           error: `Unknown method: ${method}` >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         }; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     } >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     const response = { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       id: request.id, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       result >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     }; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     console.log(JSON.stringify(response)); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo   } catch (error) { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     console.error('Error processing request:', error); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     const errorResponse = { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       id: request?.id || 'unknown', >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       error: { >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo         message: `PDF Parser MCP error: ${error.message}`, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo       }, >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     }; >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo     console.log(JSON.stringify(errorResponse)); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo   } >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo }); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo. >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo // Keep the process running >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"
echo process.stdin.resume(); >> "%MCP_DIR%\document-processing\pdf-parser-mcp.js"

REM Create Financial Analytics MCP
echo Creating Financial Analytics MCP...
echo // Financial Analytics MCP > "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo // This MCP performs financial calculations and analysis >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo console.log('Financial Analytics MCP server running on stdio'); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo // Perform financial calculations >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo function calculateFinancialMetrics(data) { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo   try { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     // Simulate financial calculations >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     return { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       success: true, >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       metrics: { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         roi: 0.15, // 15%% ROI >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         npv: 50000, // $50,000 NPV >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         irr: 0.12, // 12%% IRR >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         paybackPeriod: 3.5 // 3.5 years >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       } >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     }; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo   } catch (error) { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     return { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       success: false, >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       error: error.message >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     }; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo   } >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo } >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo // Handle MCP requests >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo process.stdin.on('data', (data) => { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo   try { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     const request = JSON.parse(data.toString()); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     const { method, params } = request; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     let result; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     switch (method) { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       case 'calculateMetrics': >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         result = calculateFinancialMetrics(params.data); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         break; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       default: >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         result = { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo           success: false, >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo           error: `Unknown method: ${method}` >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         }; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     } >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     const response = { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       id: request.id, >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       result >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     }; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     console.log(JSON.stringify(response)); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo   } catch (error) { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     console.error('Error processing request:', error); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     const errorResponse = { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       id: request?.id || 'unknown', >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       error: { >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo         message: `Financial Analytics MCP error: ${error.message}`, >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo       }, >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     }; >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo     console.log(JSON.stringify(errorResponse)); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo   } >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo }); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo. >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo // Keep the process running >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"
echo process.stdin.resume(); >> "%MCP_DIR%\financial-analysis\financial-analytics-mcp.js"

REM Create Workflow MCP
echo Creating Workflow MCP...
echo // Workflow MCP > "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo // This MCP manages automated workflows >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo console.log('Workflow MCP server running on stdio'); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo // Manage workflows >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo function executeWorkflow(workflowName, params) { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo   try { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     // Simulate workflow execution >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     return { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       success: true, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       workflowName, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       status: 'completed', >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       result: { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo         message: `Workflow ${workflowName} executed successfully`, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo         timestamp: new Date().toISOString() >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       } >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     }; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo   } catch (error) { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     return { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       success: false, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       error: error.message >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     }; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo   } >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo } >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo // Handle MCP requests >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo process.stdin.on('data', (data) => { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo   try { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     const request = JSON.parse(data.toString()); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     const { method, params } = request; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     let result; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     switch (method) { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       case 'executeWorkflow': >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo         result = executeWorkflow(params.workflowName, params.workflowParams); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo         break; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       default: >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo         result = { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo           success: false, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo           error: `Unknown method: ${method}` >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo         }; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     } >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     const response = { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       id: request.id, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       result >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     }; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     console.log(JSON.stringify(response)); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo   } catch (error) { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     console.error('Error processing request:', error); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     const errorResponse = { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       id: request?.id || 'unknown', >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       error: { >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo         message: `Workflow MCP error: ${error.message}`, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo       }, >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     }; >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo     console.log(JSON.stringify(errorResponse)); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo   } >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo }); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo. >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo // Keep the process running >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"
echo process.stdin.resume(); >> "%MCP_DIR%\agent-orchestration\workflow-mcp.js"

REM Create a script to start project-specific MCPs
echo Creating script to start project-specific MCPs...
echo @echo off > "%MCP_DIR%\start-project-mcps.bat"
echo echo ================================================= >> "%MCP_DIR%\start-project-mcps.bat"
echo echo Starting Project-Specific MCPs >> "%MCP_DIR%\start-project-mcps.bat"
echo echo ================================================= >> "%MCP_DIR%\start-project-mcps.bat"
echo echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo set LOG_DIR=%%TEMP%%\project-mcp-logs >> "%MCP_DIR%\start-project-mcps.bat"
echo mkdir %%LOG_DIR%% 2^>nul >> "%MCP_DIR%\start-project-mcps.bat"
echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo echo Starting PDF Parser MCP... >> "%MCP_DIR%\start-project-mcps.bat"
echo start "PDF Parser MCP" cmd /c "node %%~dp0document-processing\pdf-parser-mcp.js ^> %%LOG_DIR%%\pdf-parser-mcp.log 2^>^&1" >> "%MCP_DIR%\start-project-mcps.bat"
echo timeout /t 1 ^> nul >> "%MCP_DIR%\start-project-mcps.bat"
echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo echo Starting Financial Analytics MCP... >> "%MCP_DIR%\start-project-mcps.bat"
echo start "Financial Analytics MCP" cmd /c "node %%~dp0financial-analysis\financial-analytics-mcp.js ^> %%LOG_DIR%%\financial-analytics-mcp.log 2^>^&1" >> "%MCP_DIR%\start-project-mcps.bat"
echo timeout /t 1 ^> nul >> "%MCP_DIR%\start-project-mcps.bat"
echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo echo Starting Workflow MCP... >> "%MCP_DIR%\start-project-mcps.bat"
echo start "Workflow MCP" cmd /c "node %%~dp0agent-orchestration\workflow-mcp.js ^> %%LOG_DIR%%\workflow-mcp.log 2^>^&1" >> "%MCP_DIR%\start-project-mcps.bat"
echo timeout /t 1 ^> nul >> "%MCP_DIR%\start-project-mcps.bat"
echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo echo ================================================= >> "%MCP_DIR%\start-project-mcps.bat"
echo echo All Project-Specific MCPs Started! >> "%MCP_DIR%\start-project-mcps.bat"
echo echo ================================================= >> "%MCP_DIR%\start-project-mcps.bat"
echo echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo echo MCP logs are being saved to: %%LOG_DIR%% >> "%MCP_DIR%\start-project-mcps.bat"
echo echo. >> "%MCP_DIR%\start-project-mcps.bat"
echo echo Press any key to exit... >> "%MCP_DIR%\start-project-mcps.bat"
echo pause ^> nul >> "%MCP_DIR%\start-project-mcps.bat"

echo.
echo ===================================================
echo Financial SaaS MCP Setup Complete!
echo ===================================================
echo.
echo Project-specific MCPs have been set up in:
echo %MCP_DIR%
echo.
echo To start the project-specific MCPs, run:
echo %MCP_DIR%\start-project-mcps.bat
echo.
echo Press any key to exit...
pause > nul

name: Enhanced Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'DevDocs/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: DevDocs/backend
        run: npm ci
      
      - name: Run linter
        working-directory: DevDocs/backend
        run: npm run lint || true
      
      - name: Run unit tests
        working-directory: DevDocs/backend
        run: npm run test:unit
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-unit-coverage
          path: DevDocs/backend/coverage
  
  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'DevDocs/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: DevDocs/backend
        run: npm ci
      
      - name: Run integration tests
        working-directory: DevDocs/backend
        run: npm run test:integration
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-integration-coverage
          path: DevDocs/backend/coverage
  
  plugin-tests:
    name: Plugin System Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'DevDocs/backend/package-lock.json'
      
      - name: Install dependencies
        working-directory: DevDocs/backend
        run: npm ci
      
      - name: Run plugin tests
        working-directory: DevDocs/backend
        run: npm run test:plugins
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: plugin-tests-coverage
          path: DevDocs/backend/coverage
  
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'DevDocs/frontend/package-lock.json'
      
      - name: Install dependencies
        working-directory: DevDocs/frontend
        run: npm ci
      
      - name: Run linter
        working-directory: DevDocs/frontend
        run: npm run lint || true
      
      - name: Run tests
        working-directory: DevDocs/frontend
        run: npm run test
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-unit-coverage
          path: DevDocs/frontend/coverage
  
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-integration-tests, frontend-unit-tests]
    
    strategy:
      matrix:
        node-version: [18.x]
        python-version: [3.9]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f DevDocs/backend/requirements.txt ]; then 
            pip install -r DevDocs/backend/requirements.txt
          fi
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Install backend dependencies
        working-directory: DevDocs/backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: DevDocs/frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: DevDocs/frontend
        run: npm run build
      
      - name: Start backend server
        working-directory: DevDocs/backend
        run: |
          npm run start &
          echo $! > backend.pid
          sleep 5
      
      - name: Start frontend server
        working-directory: DevDocs/frontend
        run: |
          npm run start &
          echo $! > frontend.pid
          sleep 10
      
      - name: Run E2E tests
        run: npx playwright test
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
      
      - name: Stop servers
        if: always()
        run: |
          if [ -f DevDocs/backend/backend.pid ]; then
            kill $(cat DevDocs/backend/backend.pid) || true
          fi
          if [ -f DevDocs/frontend/frontend.pid ]; then
            kill $(cat DevDocs/frontend/frontend.pid) || true
          fi
  
  coverage-report:
    name: Combine Coverage Reports
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, backend-integration-tests, plugin-tests, frontend-unit-tests]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      
      - name: Install nyc
        run: npm install -g nyc
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports
      
      - name: Combine coverage reports
        run: |
          mkdir -p combined-coverage
          nyc merge coverage-reports combined-coverage/coverage
          nyc report --reporter=html --reporter=text --reporter=lcov --temp-dir=combined-coverage
      
      - name: Upload combined coverage report
        uses: actions/upload-artifact@v3
        with:
          name: combined-coverage-report
          path: coverage
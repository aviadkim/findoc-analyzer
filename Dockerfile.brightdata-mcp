FROM node:16-slim AS build-deps

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

FROM node:16-slim AS builder

WORKDIR /app

COPY --from=build-deps /app/node_modules ./node_modules
COPY brightdata-mcp-integration.js ./
COPY server-fixed.js ./server.js
COPY agent-manager.js ./
COPY api-key-manager.js ./
COPY public ./public
COPY apply-qa-fixes.js ./
COPY inject-fix.js ./

# Create necessary directories
RUN mkdir -p uploads temp results config logs docs utils services middleware

# Create logger.js in utils directory
RUN echo "const logger = { \
  info: (message) => console.log(`[INFO] ${message}`), \
  error: (message) => console.error(`[ERROR] ${message}`), \
  warn: (message) => console.warn(`[WARN] ${message}`), \
  debug: (message) => console.debug(`[DEBUG] ${message}`) \
}; \
\
module.exports = logger;" > utils/logger.js

# Create config.js file
RUN echo "module.exports = { \
  port: process.env.PORT || 3004, \
  environment: process.env.NODE_ENV || 'development', \
  apiKeys: { \
    brightdata: process.env.BRIGHTDATA_API_KEY || '', \
  }, \
  services: { \
    mainService: process.env.MAIN_SERVICE_URL || 'http://localhost:8080', \
  } \
};" > config.js

# Create brightdata-mcp-monitor.js file
RUN echo "/**\n\
 * Brightdata MCP Monitoring Service\n\
 * \n\
 * This service monitors the FinDoc Analyzer application using Brightdata MCP.\n\
 * It tracks user interactions, API responses, and document processing workflows.\n\
 */\n\
\n\
const express = require('express');\n\
const cors = require('cors');\n\
const fetch = require('node-fetch');\n\
const logger = require('./utils/logger');\n\
const config = require('./config');\n\
const brightdataMcp = require('./brightdata-mcp-integration');\n\
\n\
const app = express();\n\
\n\
// Middleware\n\
app.use(cors());\n\
app.use(express.json());\n\
\n\
// Health check endpoint\n\
app.get('/health', (req, res) => {\n\
  logger.info('Health check endpoint called');\n\
  res.status(200).json({ status: 'ok', service: 'brightdata-mcp-monitor' });\n\
});\n\
\n\
// Start monitoring endpoint\n\
app.post('/start-monitoring', async (req, res) => {\n\
  try {\n\
    const { url, duration } = req.body;\n\
    \n\
    if (!url) {\n\
      return res.status(400).json({ error: 'URL is required' });\n\
    }\n\
    \n\
    const monitoringDuration = duration || 3600; // Default to 1 hour\n\
    \n\
    logger.info(`Starting monitoring for ${url} for ${monitoringDuration} seconds`);\n\
    \n\
    // Start monitoring in the background\n\
    startMonitoring(url, monitoringDuration);\n\
    \n\
    res.status(200).json({\n\
      status: 'success',\n\
      message: `Monitoring started for ${url}`,\n\
      duration: monitoringDuration,\n\
      monitoringId: Date.now().toString()\n\
    });\n\
  } catch (error) {\n\
    logger.error(`Error starting monitoring: ${error.message}`);\n\
    res.status(500).json({ error: 'Internal server error' });\n\
  }\n\
});\n\
\n\
// Function to start monitoring\n\
async function startMonitoring(url, duration) {\n\
  try {\n\
    // Monitor document upload and processing\n\
    monitorDocumentProcessing(url, duration);\n\
    \n\
    // Monitor chat functionality\n\
    monitorChatFunctionality(url, duration);\n\
    \n\
    // Monitor API responses\n\
    monitorApiResponses(url, duration);\n\
    \n\
    // Set timeout to stop monitoring\n\
    setTimeout(() => {\n\
      logger.info(`Monitoring completed for ${url}`);\n\
    }, duration * 1000);\n\
  } catch (error) {\n\
    logger.error(`Error in monitoring: ${error.message}`);\n\
  }\n\
}\n\
\n\
// Function to monitor document processing\n\
async function monitorDocumentProcessing(url, duration) {\n\
  try {\n\
    // Use Brightdata MCP to monitor document upload and processing\n\
    const result = await brightdataMcp.callBrightDataApi(url, null, {\n\
      executeJs: true,\n\
      waitFor: '#upload-form',\n\
      timeout: 30000,\n\
      monitorEvents: true,\n\
      monitorNetwork: true,\n\
      monitorConsole: true,\n\
      monitorDuration: duration\n\
    });\n\
    \n\
    logger.info(`Document processing monitoring started: ${JSON.stringify(result)}`);\n\
  } catch (error) {\n\
    logger.error(`Error monitoring document processing: ${error.message}`);\n\
  }\n\
}\n\
\n\
// Function to monitor chat functionality\n\
async function monitorChatFunctionality(url, duration) {\n\
  try {\n\
    // Use Brightdata MCP to monitor chat functionality\n\
    const result = await brightdataMcp.callBrightDataApi(`${url}/chat`, null, {\n\
      executeJs: true,\n\
      waitFor: '#chat-container',\n\
      timeout: 30000,\n\
      monitorEvents: true,\n\
      monitorNetwork: true,\n\
      monitorConsole: true,\n\
      monitorDuration: duration\n\
    });\n\
    \n\
    logger.info(`Chat functionality monitoring started: ${JSON.stringify(result)}`);\n\
  } catch (error) {\n\
    logger.error(`Error monitoring chat functionality: ${error.message}`);\n\
  }\n\
}\n\
\n\
// Function to monitor API responses\n\
async function monitorApiResponses(url, duration) {\n\
  try {\n\
    // Use Brightdata MCP to monitor API responses\n\
    const result = await brightdataMcp.callBrightDataApi(`${url}/api`, null, {\n\
      executeJs: true,\n\
      monitorNetwork: true,\n\
      monitorDuration: duration,\n\
      networkFilters: {\n\
        urls: ['*/api/*'],\n\
        resourceTypes: ['xhr', 'fetch']\n\
      }\n\
    });\n\
    \n\
    logger.info(`API responses monitoring started: ${JSON.stringify(result)}`);\n\
  } catch (error) {\n\
    logger.error(`Error monitoring API responses: ${error.message}`);\n\
  }\n\
}\n\
\n\
// Start server\n\
const PORT = config.port;\n\
app.listen(PORT, () => {\n\
  logger.info(`Brightdata MCP monitoring service running on port ${PORT}`);\n\
});" > brightdata-mcp-monitor.js

# Apply QA fixes
RUN node apply-qa-fixes.js

FROM node:16-slim AS runtime

WORKDIR /app

RUN apt-get update && apt-get install -y \
  curl \
  && rm -rf /var/lib/apt/lists/*

COPY --from=builder /app ./

# Create MCP config file
RUN echo '{"service":"brightdata-mcp","version":"1.0.0"}' > ./config/brightdata-mcp-config.json

# Set permissions
RUN chmod -R 755 /app/uploads /app/temp /app/results /app/config /app/logs
RUN chown -R node:node /app

USER node

CMD ["node", "brightdata-mcp-monitor.js"]

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f src/google_agents_integration/requirements.txt ]; then pip install -r src/google_agents_integration/requirements.txt; fi
        pip install pytest pytest-cov
    - name: Test with pytest
      run: |
        pytest src/google_agents_integration/tests/ --cov=src/google_agents_integration
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  build-and-push:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ./src/google_agents_integration
        file: ./src/google_agents_integration/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/findoc-rag:latest

  deploy:
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy findoc-rag \
          --image ${{ secrets.DOCKER_HUB_USERNAME }}/findoc-rag:latest \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"

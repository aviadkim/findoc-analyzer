/**
 * UI API Routes
 * API routes for UI components
 */

const express = require('express');
const router = express.Router();

// Mock agents data
const agents = [
  {
    name: 'Document Analyzer',
    status: 'active',
    description: 'Analyzes financial documents and extracts key information.'
  },
  {
    name: 'Table Understanding',
    status: 'idle',
    description: 'Extracts and analyzes tables from financial documents.'
  },
  {
    name: 'Securities Extractor',
    status: 'error',
    description: 'Extracts securities information from financial documents.'
  },
  {
    name: 'Financial Reasoner',
    status: 'active',
    description: 'Provides financial reasoning and insights based on the extracted data.'
  },
  {
    name: 'Bloomberg Agent',
    status: 'idle',
    description: 'Fetches real-time financial data from Bloomberg.'
  }
];

// Mock agent logs
const agentLogs = {
  'Document Analyzer': [
    '2023-05-01 10:00:00 - Started document analysis',
    '2023-05-01 10:01:00 - Extracted text from document',
    '2023-05-01 10:02:00 - Identified tables in document',
    '2023-05-01 10:03:00 - Extracted metadata from document',
    '2023-05-01 10:04:00 - Completed document analysis'
  ],
  'Table Understanding': [
    '2023-05-01 10:00:00 - Started table analysis',
    '2023-05-01 10:01:00 - Identified table structure',
    '2023-05-01 10:02:00 - Extracted table data',
    '2023-05-01 10:03:00 - Completed table analysis'
  ],
  'Securities Extractor': [
    '2023-05-01 10:00:00 - Started securities extraction',
    '2023-05-01 10:01:00 - Error: Failed to extract securities'
  ],
  'Financial Reasoner': [
    '2023-05-01 10:00:00 - Started financial reasoning',
    '2023-05-01 10:01:00 - Analyzed financial data',
    '2023-05-01 10:02:00 - Generated financial insights',
    '2023-05-01 10:03:00 - Completed financial reasoning'
  ],
  'Bloomberg Agent': [
    '2023-05-01 10:00:00 - Started Bloomberg data fetch',
    '2023-05-01 10:01:00 - Fetched stock prices',
    '2023-05-01 10:02:00 - Fetched company information',
    '2023-05-01 10:03:00 - Completed Bloomberg data fetch'
  ]
};

/**
 * @route GET /api/agents
 * @desc Get all agents
 * @access Public
 */
router.get('/agents', (req, res) => {
  res.json(agents);
});

/**
 * @route GET /api/agents/:name
 * @desc Get agent by name
 * @access Public
 */
router.get('/agents/:name', (req, res) => {
  const agent = agents.find(a => a.name === req.params.name);
  
  if (!agent) {
    return res.status(404).json({ message: 'Agent not found' });
  }
  
  res.json(agent);
});

/**
 * @route GET /api/agents/:name/logs
 * @desc Get agent logs
 * @access Public
 */
router.get('/agents/:name/logs', (req, res) => {
  const logs = agentLogs[req.params.name];
  
  if (!logs) {
    return res.status(404).json({ message: 'Agent logs not found' });
  }
  
  res.json({ logs: logs.join('\n') });
});

/**
 * @route POST /api/agents/:name/configure
 * @desc Configure agent
 * @access Public
 */
router.post('/agents/:name/configure', (req, res) => {
  const agent = agents.find(a => a.name === req.params.name);
  
  if (!agent) {
    return res.status(404).json({ message: 'Agent not found' });
  }
  
  res.json({ message: `${agent.name} configured successfully` });
});

/**
 * @route POST /api/agents/:name/reset
 * @desc Reset agent
 * @access Public
 */
router.post('/agents/:name/reset', (req, res) => {
  const agent = agents.find(a => a.name === req.params.name);
  
  if (!agent) {
    return res.status(404).json({ message: 'Agent not found' });
  }
  
  // Reset agent status
  agent.status = 'idle';
  
  res.json({ message: `${agent.name} reset successfully` });
});

/**
 * @route POST /api/process-document
 * @desc Process document
 * @access Public
 */
router.post('/process-document', (req, res) => {
  // Simulate document processing
  setTimeout(() => {
    res.json({ 
      message: 'Document processed successfully',
      documentId: 'doc-' + Math.floor(Math.random() * 1000000)
    });
  }, 2000);
});

/**
 * @route POST /api/chat
 * @desc Chat with AI
 * @access Public
 */
router.post('/chat', (req, res) => {
  const { message } = req.body;
  
  if (!message) {
    return res.status(400).json({ message: 'Message is required' });
  }
  
  // Simulate AI response
  setTimeout(() => {
    res.json({ 
      message: `This is a simulated response to your question: "${message}". In a real implementation, this would be generated by an AI model.`
    });
  }, 1000);
});

module.exports = router;

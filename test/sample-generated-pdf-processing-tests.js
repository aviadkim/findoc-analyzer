/**
 * Generated PDF Processing Tests
 * 
 * This file contains generated end-to-end tests for the PDF processing functionality.
 * DO NOT EDIT MANUALLY - This file is generated by test-generator.js
 */

const path = require('path');
const {
  config,
  runTest,
  generateReport,
  navigateTo,
  uploadFile,
  submitForm,
  waitForElement,
  elementExists,
  getTextContent
} = require('./e2e-testing-framework');

/**
 * Run the tests
 */
async function runTests() {
// Test 1: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 1', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '001-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '001-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '001-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '001-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });
// Test 2: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 2', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '002-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '002-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
// Test 3: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 3', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '003-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '003-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });

  

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '002-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '002-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '003-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '003-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '004-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '004-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '005-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '005-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '006-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '006-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '008-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '008-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '009-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '009-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '010-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '010-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '012-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '012-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '014-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '014-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '015-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '015-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '016-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '016-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '018-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '018-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '020-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '020-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '021-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '021-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '022-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '022-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '024-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '024-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '025-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '025-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '026-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '026-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '027-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '027-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '028-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '028-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '030-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '030-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '032-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '032-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '033-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '033-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '034-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '034-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '035-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '035-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '036-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '036-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '038-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '038-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '039-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '039-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '040-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '040-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '042-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '042-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '044-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '044-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '045-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '045-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '046-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '046-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '048-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '048-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  

  
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '050-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '050-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '051-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '051-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '052-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '052-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '054-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '054-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '055-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '055-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '056-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '056-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '057-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '057-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '058-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '058-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '060-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '060-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '062-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '062-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '063-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '063-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '064-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '064-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '065-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '065-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '066-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '066-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '068-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '068-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '069-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '069-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '070-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '070-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '072-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '072-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '074-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '074-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '075-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '075-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '076-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '076-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '078-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '078-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '080-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '080-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '081-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '081-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '082-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '082-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '084-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '084-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '085-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '085-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '086-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '086-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '087-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '087-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '088-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '088-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '090-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '090-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  

  
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '092-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '092-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '093-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '093-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '094-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '094-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '095-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '095-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '096-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '096-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  

  
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '098-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '098-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '099-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '099-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '100-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '100-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Generate the test report
  generateReport();
}

// Run the tests
runTests().catch(error => {
  console.error('Error running tests:', error);
  process.exit(1);
});

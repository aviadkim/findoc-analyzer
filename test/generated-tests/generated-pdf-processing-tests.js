/**
 * Generated PDF Processing Tests
 * 
 * This file contains generated end-to-end tests for the PDF processing functionality.
 * DO NOT EDIT MANUALLY - This file is generated by test-generator.js
 */

const path = require('path');
const {
  config,
  runTest,
  generateReport,
  navigateTo,
  uploadFile,
  submitForm,
  waitForElement,
  elementExists,
  getTextContent
} = require('./e2e-testing-framework');

/**
 * Run the tests
 */
async function runTests() {

  // Test 1: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 1', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '001-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '001-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '001-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '001-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 2: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 2', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '002-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '002-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '002-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '002-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 3: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 3', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '003-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '003-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '003-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '003-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 4: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 4', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '004-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '004-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '004-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '004-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 5: PDF processing with no OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 5', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '005-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '005-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '005-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '005-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 6: PDF processing with OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 6', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '006-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '006-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '006-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '006-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 7: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 7', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '007-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '007-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '007-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '007-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 8: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 8', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '008-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '008-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '008-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '008-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 9: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 9', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '009-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '009-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '009-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '009-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 10: PDF processing with OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 10', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '010-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '010-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '010-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '010-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 11: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 11', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '011-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '011-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '011-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '011-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 12: PDF processing with OCR, without tables, with metadata, without securities
  await runTest('PDF processing test 12', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '012-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '012-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '012-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '012-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 13: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 13', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '013-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '013-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '013-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '013-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 14: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 14', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '014-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '014-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '014-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '014-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 15: PDF processing with no OCR, without tables, without metadata, with securities
  await runTest('PDF processing test 15', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '015-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '015-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '015-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '015-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 16: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 16', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '016-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '016-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '016-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '016-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 17: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 17', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '017-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '017-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '017-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '017-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 18: PDF processing with OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 18', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '018-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '018-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '018-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '018-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 19: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 19', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '019-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '019-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '019-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '019-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 20: PDF processing with OCR, with tables, without metadata, without securities
  await runTest('PDF processing test 20', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '020-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '020-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '020-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '020-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 21: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 21', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '021-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '021-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '021-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '021-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 22: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 22', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '022-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '022-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '022-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '022-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 23: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 23', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '023-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '023-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '023-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '023-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 24: PDF processing with OCR, without tables, with metadata, without securities
  await runTest('PDF processing test 24', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '024-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '024-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '024-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '024-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 25: PDF processing with no OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 25', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '025-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '025-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '025-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '025-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 26: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 26', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '026-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '026-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '026-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '026-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 27: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 27', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '027-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '027-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '027-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '027-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 28: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 28', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '028-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '028-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '028-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '028-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 29: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 29', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '029-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '029-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '029-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '029-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 30: PDF processing with OCR, without tables, without metadata, with securities
  await runTest('PDF processing test 30', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '030-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '030-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '030-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '030-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 31: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 31', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '031-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '031-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '031-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '031-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 32: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 32', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '032-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '032-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '032-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '032-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 33: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 33', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '033-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '033-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '033-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '033-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 34: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 34', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '034-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '034-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '034-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '034-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 35: PDF processing with no OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 35', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '035-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '035-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '035-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '035-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 36: PDF processing with OCR, without tables, with metadata, without securities
  await runTest('PDF processing test 36', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '036-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '036-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '036-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '036-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 37: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 37', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '037-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '037-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '037-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '037-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 38: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 38', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '038-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '038-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '038-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '038-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 39: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 39', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '039-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '039-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '039-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '039-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 40: PDF processing with OCR, with tables, without metadata, without securities
  await runTest('PDF processing test 40', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '040-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '040-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '040-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '040-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 41: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 41', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '041-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '041-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '041-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '041-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 42: PDF processing with OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 42', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '042-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '042-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '042-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '042-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 43: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 43', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '043-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '043-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '043-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '043-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 44: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 44', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '044-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '044-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '044-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '044-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 45: PDF processing with no OCR, without tables, without metadata, with securities
  await runTest('PDF processing test 45', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '045-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '045-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '045-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '045-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 46: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 46', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '046-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '046-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '046-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '046-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 47: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 47', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '047-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '047-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '047-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '047-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 48: PDF processing with OCR, without tables, with metadata, without securities
  await runTest('PDF processing test 48', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '048-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '048-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '048-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '048-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 49: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 49', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '049-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '049-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '049-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '049-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 50: PDF processing with OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 50', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '050-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '050-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '050-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '050-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 51: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 51', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '051-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '051-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '051-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '051-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 52: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 52', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '052-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '052-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '052-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '052-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 53: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 53', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '053-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '053-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '053-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '053-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 54: PDF processing with OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 54', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '054-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '054-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '054-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '054-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 55: PDF processing with no OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 55', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '055-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '055-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '055-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '055-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 56: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 56', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '056-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '056-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '056-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '056-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 57: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 57', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '057-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '057-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '057-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '057-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 58: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 58', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '058-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '058-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '058-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '058-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 59: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 59', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '059-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '059-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '059-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '059-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 60: PDF processing with OCR, without tables, without metadata, without securities
  await runTest('PDF processing test 60', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '060-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '060-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '060-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '060-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 61: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 61', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '061-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '061-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '061-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '061-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 62: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 62', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '062-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '062-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '062-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '062-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 63: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 63', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '063-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '063-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '063-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '063-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 64: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 64', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '064-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '064-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '064-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '064-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 65: PDF processing with no OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 65', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '065-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '065-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '065-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '065-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 66: PDF processing with OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 66', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '066-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '066-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '066-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '066-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 67: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 67', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '067-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '067-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '067-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '067-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 68: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 68', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '068-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '068-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '068-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '068-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 69: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 69', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '069-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '069-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '069-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '069-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 70: PDF processing with OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 70', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '070-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '070-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '070-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '070-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 71: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 71', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '071-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '071-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '071-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '071-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 72: PDF processing with OCR, without tables, with metadata, without securities
  await runTest('PDF processing test 72', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '072-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '072-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '072-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '072-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 73: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 73', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '073-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '073-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '073-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '073-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 74: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 74', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '074-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '074-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '074-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '074-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 75: PDF processing with no OCR, without tables, without metadata, with securities
  await runTest('PDF processing test 75', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '075-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '075-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '075-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '075-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 76: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 76', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '076-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '076-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '076-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '076-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 77: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 77', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '077-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '077-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '077-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '077-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 78: PDF processing with OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 78', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '078-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '078-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '078-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '078-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 79: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 79', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '079-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '079-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '079-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '079-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 80: PDF processing with OCR, with tables, without metadata, without securities
  await runTest('PDF processing test 80', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '080-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '080-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '080-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '080-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 81: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 81', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '081-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '081-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '081-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '081-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 82: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 82', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '082-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '082-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '082-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '082-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 83: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 83', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '083-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '083-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '083-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '083-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 84: PDF processing with OCR, without tables, with metadata, without securities
  await runTest('PDF processing test 84', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '084-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '084-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '084-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '084-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 85: PDF processing with no OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 85', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '085-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '085-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '085-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '085-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 86: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 86', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '086-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '086-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '086-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '086-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 87: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 87', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '087-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '087-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '087-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '087-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 88: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 88', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '088-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '088-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '088-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '088-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 89: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 89', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '089-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '089-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '089-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '089-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 90: PDF processing with OCR, without tables, without metadata, with securities
  await runTest('PDF processing test 90', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '090-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '090-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '090-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '090-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 91: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 91', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '091-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '091-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '091-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '091-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 92: PDF processing with OCR, with tables, with metadata, without securities
  await runTest('PDF processing test 92', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '092-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '092-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '092-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '092-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Test 93: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 93', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '093-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '093-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '093-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '093-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 94: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 94', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '094-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '094-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '094-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '094-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 95: PDF processing with no OCR, with tables, without metadata, with securities
  await runTest('PDF processing test 95', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '095-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '095-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '095-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '095-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 96: PDF processing with OCR, without tables, with metadata, without securities
  await runTest('PDF processing test 96', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '096-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '096-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '096-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '096-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
  });

  // Test 97: PDF processing with no OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 97', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '097-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '097-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '097-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '097-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 98: PDF processing with OCR, with tables, with metadata, with securities
  await runTest('PDF processing test 98', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '098-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '098-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '098-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '098-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 99: PDF processing with no OCR, without tables, with metadata, with securities
  await runTest('PDF processing test 99', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '099-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '099-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    
    
    // Disable table extraction
    try {
      await page.click('#extractTables');
    } catch (error) {
      console.warn('Could not click extractTables checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractTables');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    
    
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '099-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '099-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    
    
    // Check if securities are displayed
    const securitiesExist = await elementExists(page, '#securitiesSection table, .securities-section table');
    if (!securitiesExist) {
      console.warn('Securities not displayed');
    }
  });

  // Test 100: PDF processing with OCR, with tables, without metadata, without securities
  await runTest('PDF processing test 100', async (page) => {
    // Navigate to the upload page
    await navigateTo(page, `${config.baseUrl}/upload`, '100-upload-page');
    
    // Check if the upload form exists
    const formExists = await elementExists(page, 'form');
    if (!formExists) {
      throw new Error('Upload form not found');
    }
    
    // Upload a PDF file
    const testPdfPath = path.join(config.testFilesDir, 'test-portfolio.pdf');
    const fileUploaded = await uploadFile(page, 'input[type="file"]', testPdfPath, '100-file-selected');
    
    if (!fileUploaded) {
      throw new Error('Failed to upload PDF file');
    }
    
    // Set options
    
    // Enable OCR
    try {
      await page.click('#useOcr');
    } catch (error) {
      console.warn('Could not click OCR checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#useOcr');
        if (checkbox) {
          checkbox.checked = true;
        }
      });
    }
    
    
    
    
    // Disable metadata extraction
    try {
      await page.click('#extractMetadata');
    } catch (error) {
      console.warn('Could not click extractMetadata checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractMetadata');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    
    // Disable securities extraction
    try {
      await page.click('#extractSecurities');
    } catch (error) {
      console.warn('Could not click extractSecurities checkbox, trying JavaScript click');
      await page.evaluate(() => {
        const checkbox = document.querySelector('#extractSecurities');
        if (checkbox) {
          checkbox.checked = false;
        }
      });
    }
    
    // Submit the form
    await submitForm(page, 'button[type="submit"]', '100-form-submitted');
    
    // Wait for the results
    const resultsLoaded = await waitForElement(page, '#results.show, .results, .document-results, .processing-results', 30000, '100-results-loaded');
    
    if (!resultsLoaded) {
      throw new Error('Results not loaded within timeout');
    }
    
    // Check if the document info is displayed
    const documentInfoExists = await elementExists(page, '#documentInfo, .document-info');
    if (!documentInfoExists) {
      throw new Error('Document info not displayed');
    }
    
    
    // Check if tables are displayed
    const tablesExist = await elementExists(page, '#tablesSection table, .tables-section table, table');
    if (!tablesExist) {
      console.warn('Tables not displayed');
    }
    
    
  });

  // Generate the test report
  generateReport();
}

// Run the tests
runTests().catch(error => {
  console.error('Error running tests:', error);
  process.exit(1);
});
